
복습 !

컬렉션 ( Collection )
	-> 배열은 크기가 고정되어있지만, 컬렉션은 크기가 가변적이여서 배열의 단점을 보완하였다.
	
					Collection
				Set / List / Que / Map			<-- 여기까지는 인터페이스
		HashSet / ArrayList / Vector / HashMap ....
	

	Vector , ArrayList 는 get() / HashMap 은 put() 을 씀
	
	HashMap 은 키 와 벨류로 나뉘는데 검색할땐 키값으로 검색해야한다.

================================================================================

Iterator <E>
	-> Vector , ArrayList 를 순차적으로 검색하기위한 인터페이스.
	
	hasNext() -> 접근할 요소가 있으면 true 리턴
	next() -> 다음 요소 리턴
	
	Vector<Integer> v = new Vector<Integer>();
	Iterator<Integer> it = v.iterator();				<<== 이부분 이 다른 컬렉션이랑 좀 다음.
	while(it.hasNext()) { // 모든 요소 방문
	int n = it.next(); // 다음 요소 리턴
	
				-> Tokenizer 랑 비슷함
				
================================================================================

제네릭 ( Generic ) 
	-> 클래스 만들때 어떤 참조타입으로 할건지 정하지않고, 객체 생성시 참조형 타입 선언 시켜주려고 씀
	-> < >  괄호 안에 하나의 대문자 타입 매개변수를 보통 사용   ex) E , T , K , V ... 
	
	push() , pop()  데이터 값을 넣을때 뺄때 보통 저렇게 정의함.
	
	제네릭 메소드 선언 가능!
	
	제네릭은 클래스끼리 타입 이 맞게 만들어줘야한다.
	
================================================================================

 	private int a  	<== private 이면 getter , setter 를 쓴다
 	
 ================================================================================
 	
 	get() 을 출력가능, set() 은 리턴이 없으니 출력 불가능
				
================================================================================
				
	scanner.nextLine()			<=== Line은 엔터를 만나면 끝나버리는 성질이있음
	
	문자열 입력받을땐 scanner.next()		<= \n 전까지만 들어감
	
	next() 를 주로쓴다. 그런데
	abc def		<<= 이렇게 입력하면 \s ( 띄어쓰기 ) 있는 까지만 들어감
	
================================================================================
	
	객체 레퍼런스 와 변수는 아예 다른거임.
	객체 레퍼런스는 주소값이라고 생각해라
	// 레퍼런스를 공유하는 관계에선 값에 영향을 준다~
	
================================================================================
	
예외처리 ( Exception ) try ~ catch ~ (finally 생략가능)
	-> 오류랑 예외랑은 다른거임.		// 오류 = 문법적으로 안맞는거.. 
	
	ArithmaticException , NullPointerException 이런것들은 부모인 Exception 에게 상속받고있다. 
	
	catch 는 여러개 쓸수있다.